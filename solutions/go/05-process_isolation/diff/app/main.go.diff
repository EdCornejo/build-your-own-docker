@@ -19,50 +19,54 @@
 	if err != nil {
 		fmt.Printf("error creating chroot dir: %v", err)
 		os.Exit(1)
 	}

 	if err = copyExecutableIntoDir(chrootDir, command); err != nil {
 		fmt.Printf("error copying executable into chroot dir: %v", err)
 		os.Exit(1)
 	}

 	// Create /dev/null so that cmd.Run() doesn't complain
 	if err = createDevNull(chrootDir); err != nil {
 		fmt.Printf("error creating /dev/null: %v", err)
 		os.Exit(1)
 	}

 	if err = syscall.Chroot(chrootDir); err != nil {
 		fmt.Printf("chroot err: %v", err)
 		os.Exit(1)
 	}

 	cmd := exec.Command(command, args...)
 	cmd.Stdout = os.Stdout
 	cmd.Stderr = os.Stderr

+	cmd.SysProcAttr = &syscall.SysProcAttr{
+		Cloneflags: syscall.CLONE_NEWPID,
+	}
+
 	err = cmd.Run()
 	if exitErr, ok := err.(*exec.ExitError); ok {
 		os.Exit(exitErr.ExitCode()) // The program exited with a non-zero exit code
 	} else if err != nil {
 		fmt.Printf("Err: %v", err)
 		os.Exit(1)
 	}
 }

 func copyExecutableIntoDir(chrootDir string, executablePath string) error {
 	executablePathInChrootDir := path.Join(chrootDir, executablePath)

 	if err := os.MkdirAll(path.Dir(executablePathInChrootDir), 0750); err != nil {
 		return err
 	}

 	return copyFile(executablePath, executablePathInChrootDir)
 }

 func copyFile(sourceFilePath, destinationFilePath string) error {
 	sourceFileStat, err := os.Stat(sourceFilePath)
 	if err != nil {
 		return err
 	}

